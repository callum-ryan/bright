name: Release

on:
  release:
    types: [published]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  PACKAGE_NAME: bright

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: linux-x86_64.tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name: -linux-aarch64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: -windows-x86_64.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: -macos-x86_64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: -macos-aarch64.tar.gz

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Create archive (Unix)
      if: runner.os != 'Windows'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../${{ env.PACKAGE_NAME }}${{ matrix.asset_name }} ${{ env.PACKAGE_NAME }}
    
    - name: Create archive (Windows)
      if: runner.os == 'Windows'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../${{ env.PACKAGE_NAME }}${{ matrix.asset_name }} ${{ env.PACKAGE_NAME }}.exe
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}${{ matrix.asset_name }}
        path: ${{ env.PACKAGE_NAME }}${{ matrix.asset_name }}

  upload-assets:
    name: Upload Release Assets
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Get Token
      id: get_workflow_token
      uses: peter-murray/workflow-application-token-action@v4
      with:
          application_id: ${{ secrets.APPLICATION_ID }}
          application_private_key: ${{ secrets.APPLICATION_PRIVATE_KEY }}
          revoke_token: true
          permissions: "contents:write, metadata:read"

    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/*/*.tar.gz
        tag_name: ${{ github.event.release.tag_name }}
      env:
        GITHUB_TOKEN: ${{ steps.get_workflow_token.outputs.token }}
